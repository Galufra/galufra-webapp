Galufra Web App 1.0

--------ABSTRACT

L'applicazione web in qestione si pone come obiettivo quello di proporre un nuovo modo di valorizzare 
il territorio utilizzando una mappa come punto di accesso ad ogni luogo.
In particolare infatti permette l'inserimento e la gestione di eventi all'interno di una mappa utilizzando il 
classico ambiente fornito da google map nei suoi servizi.

Un evento è rappresentato sulla mappa da un segnaposto che si espanderà in una infowindow la quale conterrà data,luogo
e  breve descrizione. Ci sarà inoltre la possibilità di iscriversi e/o consigliare l'evento agli altri utenti e
una bacheca (in una pagina  a parte) dove gli utenti iscritti potranno commentare l' evento o comunque 
scambiarsi messaggi. 

--------UTENTI 

--VISITATORE

Un visitatore non registrato potrà visualizzare completamente la mappa e consultare gli eventi pubblici 
gestiti da utenti opportunamente registrati. Non potrà però ne interagire con questi ultimi, ne con la bacheca 
senza registrazione.

--UTENTE REGISTRATO

Un visitatore registrato (utente) potrà invece usufruire di alcune funzionalità aggiuntive quali:
-Iscriversi all' evento (rendere nota la propria partecipazione agli iscritti)
-Interagire con gli altri utenti e con l'organizzatore dell'evento all'interno della bacheca 
-Creare fino a 3 eventi pubblici
-Moderare la bacheca del proprio evento
-Gestire il profilo personale
-Ricevere un elenco di eventi consigliati dal sistema in base alla posizione in cui si trova la mappa 
  che sta consultando ordinati per data
-Avere un promemoria degli eventi a cui è registrato ordinati per data 
-Avere un promemoria degli eventi che ha creato ordinati per data
-Ricercare un particolare evento, o un gruppo di eventi se esistono tipologie simili di evento 
 (ad esempio particolari eventi che iniziano con il nome "PROVA:"

--SUPERUSER

Un ente organizzatore, o Superuser, (utente opportunamente autorizzato dal sistema, 
sotto il pagamento di una piccola cifra in denaro) potrà usufruire di tutte le funzionalità di un utente
,ma avrà la possibilità di:

-creare fino a 20 eventi pubblici

--AMMINISTRATORE

Un amministratore del sistema potrà:
- Autenticare i superuser e aggiungere altri admin
- Moderare completamente la mappa (ogni tipo di evento)
- Gestire gli utenti

Le tecnologie lato client saranno:
- ajax
- jquery
- api di google maps
- Json

--------DESCRIZIONE

L'applicazione fa un uso massiccio di javascript e in particolare della tecnologia jQuery, tanto che quasi
la totalità delle richieste verso il server vengono fatte con chiamate asincrone e non, da parte di jQuery.
La risposta da parte del server viene ogni volta compattata in una struttura dati Json, che viene parsata 
e quindi mostrata in output. Quello che si vuole ottenere infatti è fornire all'utilizzatore dell'applicazione
la sensazione di non trovarsi di fronte ad un sito web ma di fronte ad un applicazione che risponde 
istantaneamente ad i suoi comandi con e senza effetti grafici. Ogni inserimento,cancellazione,modifica di 
un'entità all'interno dell'applicazione viene infatti eseguita grazie all'utilizzo di Ajax con jQuery 
quasi istantaneamente rendendo (si spera!) piacevole (talvolta utilizzando degli effetti grafici) l'utilizzo dell'app.
L'idea è quella di continuare a sviluppare e migliorare il progetto offrendolo al web in un futuro non troppo 
lontano con qualche funzionalità aggiuntiva.

Le idee per il futuro sono infatti le seguenti:

-Sviluppare un meccanismo avanzato di ricerca dell'evento (per ora la ricerca si basa sul titolo dell'evento 
 con autocompletamento del codice usando chiamate ajax)
-Creare un meccanismo di notifica istantanea per ogni utente
-Collegarsi ai social network più importanti come Facebook e Twitter per la condivisione degli eventi
-Gestire tutti i tipi di contenuti multimediali (foto,video,immagini,ecc..)

--------IL CODICE

Nel dettaglio il codice del progetto si divide in 4 package più un'ampia sezione javascript:

-Foundation
-Controller
-Entity
-View

Nelle Foundation troviamo tutti i metodi che interagiscono a più basso livello con il database, chiamati
dai controller a seconda delle necessità. Questi ultimi sostanzialmente lavorano come intermediari tra le 
richieste effettuate dal client attraverso jQuery e le Entity, e si preoccupano di fornire in risposta array Json 
che i client possono interpretare. Sono responsabili inoltre di gestire le View a seconda delle azioni che un utente
ha scelto di compiere.La loro struttura è molto semplice, nella maggioranza dei casi nel costruttore è presente
un costrutto switch-case che smista le azioni ("action") da svolgere, inviati dal client via GET o POST.
Le view infine non fanno altro che impostare la parte statica della pagina da mostrare in output, utilizzando
Smarty.

Per quanto riguarda la grafica, si è selezionato un template gratuito preso dal web. L'applicazione viene però
gestita su un'unica pagina dove il contenuto del "div" centrale viene ogni volta riempito con un file "tpl" a 
seconda di quello che si vuole mostrare utilizzando la tecnologia jQuery per eseguire qualche effetto grafico

Il login e la registrazione vengono gestiti in maniera classica con una prima validazione dei campi riempiti
dall'utente via javascript ed una seconda lato server, stando attenti per quanto possibile alla sicurezza dell'
applicazione. Una volta effettuata la registrazione verrà inviata una email all'utente con un link di conferma.
Da quel momento viene dato un giorno di tempo all'utente per confermarla e all'interno
dell' applicazione verranno mostrate dei promemoria a questo riguardo. Il recupero password viene fatto invece 
inviando all'utente una password univoca, generata con lo stesso meccanismo con il quale vengono generati gli id
di conferma della registrazione, attraverso una nuova email. L'utente potrà così collegarsi e modificarla dal 
proprio profilo personale.

Per i dettagli tecnici su ogni funzionalita dell'applicazione si consiglia comunque la visione della Documentazione 
e/o la lettura del codice con i relativi commenti, si spera, esaustivi.

Per quanto riguarda la divisione dei compiti il lavoro è stato così suddiviso: 
-Francesco Miscia: Controller,Foundation,Entity,View,Javascript,Templating 
-Luca Di Stefano: Controller,Foundation,Entity,View,Javascript,Templating
-Gabriele Cianetti: View,Templating,Database,Testing

L'applicazione a seguito di vari test sembra sicura,veloce e affidabile. 
Sicuramente sarà soggetta a miglioramenti che speriamo vengano effettivamente messi in atto in futuro.

NOTE:
-Per il testing locale le funzioni mail() sono commentate. E' possibile confermare l'utente manualmente o
 scommentando il relativo codice
-Per l'installazione eseguire il file installer.class.php

Autori:
Francesco Miscia
Luca Di Stefano
Gabriele Cianetti

